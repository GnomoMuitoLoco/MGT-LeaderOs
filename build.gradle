plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.115'
    id 'idea'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    // ðŸ”‘ Aqui Ã© onde o Gradle vai procurar as dependÃªncias
    mavenLocal()   // procura no Maven Local (~/.m2/repository)
    mavenCentral()
    maven { url = "https://maven.neoforged.net/releases" }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all',
                    '--output', file('src/generated/resources/').getAbsolutePath(),
                    '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

// Excluir a pasta do plugin do build
sourceSets {
    main {
        java {
            exclude '**/Plugin LeaderOs/**'
        }
        resources {
            exclude '**/Plugin LeaderOs/**'
        }
    }
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    // ðŸ”‘ Agora o Chat vai puxar o Core do Maven Local
    implementation "br.com.magnatasoriginal.mgtcore:mgtcore:1.0.1-SNAPSHOT"
    implementation 'org.java-websocket:Java-WebSocket:1.5.3'
    implementation 'org.json:json:20231013'
    implementation 'org.yaml:snakeyaml:2.2'
    jarJar("org.yaml:snakeyaml:2.2")
    jarJar("org.java-websocket:Java-WebSocket:1.5.3")
    jarJar("org.json:json:20231013")

    compileOnly 'net.luckperms:api:5.4'

    // ADIÃ‡ÃƒO: Cliente Java do Pusher â€” resolve os imports com package com.pusher.client
    // VersÃ£o 2.2.6 Ã© compatÃ­vel com as APIs usadas no plugin original.
    implementation 'com.pusher:pusher-java-client:2.2.6'
    // Empacotar o cliente Pusher no fat-jar para evitar NoClassDefFoundError em runtime
    jarJar('com.pusher:pusher-java-client:2.2.6')
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.jar {
    archiveClassifier.set('')
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
